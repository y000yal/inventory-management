<?php
/**
 * Class TestCase
 *
 * @category
 * @author Yoel Limbu <yoyal.limbu@gmail.com>
 */

namespace GeniussystemsNp\InventoryManagement\Tests;

use Faker\Factory;
use GeniussystemsNp\InventoryManagement\Models\Inventory;
use GeniussystemsNp\InventoryManagement\Models\InventoryModel;
use GeniussystemsNp\InventoryManagement\Models\Vendor;
use GeniussystemsNp\InventoryManagement\Repo\Eloquent\ModelRepo;
use GeniussystemsNp\InventoryManagement\Repo\Eloquent\InventoryRepo;
use GeniussystemsNp\InventoryManagement\Repo\Eloquent\VendorRepo;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Routing\Route;
use Illuminate\Support\Facades\Artisan;


class TestCase extends \Orchestra\Testbench\TestCase {


    protected $stbVendor, $stbModel, $stb;

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->getExtras();
        $this->artisan('migrate', [
                                        '--database' => 'testing',
                                        '--realpath' => realpath(__DIR__ . '/../database/migrations'),
                                ]
        );
    }


    public function tearDown(): void {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function getEnvironmentSetUp($app): void {
        /* For Testing in actual database PS:don't use the actual database*/
        $app['config']->set('database.default', 'mysql');
        $app['config']->set('database.connections.mysql', [
                'driver'   => 'mysql',
                'database' => 'auth',
                'prefix'   => '',
                'username' => 'root',
                'host'     => '127.0.0.1'
        ]);
        //        $app['config']->set('database.default', 'testing');
        //        $app['config']->set('database.connections.testing', [
        //                'driver'   => 'sqlite',
        //                'database' => ':memory:',
        //                'prefix'   => ''
        //        ]);

    }

    public function getExtras() {
        $vendor = new Vendor();
        $model = new InventoryModel();
        $stb = new Inventory();
        $this->stbVendor = new VendorRepo($vendor);
        $this->stbModel = new ModelRepo($model);
        $this->stb = new InventoryRepo($stb);
    }
}